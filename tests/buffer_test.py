import pytest
from epd_test.buffer import DisplayBuffer
import numpy as np


def test_buffer_dimmensions():
    display = DisplayBuffer(4, 4)
    assert display.WIDTH == 8 and display.HEIGHT == 4


@pytest.mark.parametrize('x, y', [(0, 0), (9, 2), (4, 4), (10, 1)])
def test_setter(x, y):
    display = DisplayBuffer(16, 9)
    display.draw_pixel(x, y)
    assert display.get_pixel_value(x, y) == 1

@pytest.mark.parametrize(
    "x, y, pixel_val",
    [
        (0, 0, 128),
        (0, 7, 128),
        (6, 0, 2),
        (11, 0, 16)
    ]
)
def test_buffer_pixel(x, y, pixel_val):
    display = DisplayBuffer(16, 9)
    display.draw_pixel(x, y)
    display.dump_raw_buffer()
    assert display.get_pixel_byte(x, y) == pixel_val


def test_serialization():
    # 8 bytes
    display = DisplayBuffer(8, 8)
    display.draw_group_pixels([(0, 0), (1, 0), (4, 0), (5, 0)]) # CC
    display.draw_group_pixels([(0, 1), (2, 1), (4, 1), (6, 1)]) # AA
    bs = display.serialize()
    display.dump_raw_buffer()
    assert bs[0] == np.uint8(0xCC)
    assert bs[1] == np.uint8(0xAA)


def test_line():
    display = DisplayBuffer(16, 16)
    display.draw_line(2, 2, 12, 8)
    display.dump_raw_buffer()
    assert 1 == 1

def test_util():
    display = DisplayBuffer(32, 32)
    display.draw_circle_2(18, 6, 12)
    #display.dump_raw_buffer()
    print(display.render())
    assert 1 == 1

def test_bitmap():
    # Generated in https://javl.github.io/image2cpp/
    # 64x64, Plain bytes, horizontal 1-bit
    # 'phiiilie-645892', 64x64px
    bitmap1 = np.array([0x26, 0xc5, 0x4a, 0x0a, 0x8a, 0xb2, 0xb9, 0x5c, 0x8b, 0x61, 0x4a, 0x92, 0x2a, 0xaa, 0xa1, 0x46,
                       0xe1, 0x21, 0x4a, 0x94, 0x6a, 0x8a, 0x4d, 0x50, 0x30, 0x91, 0x55, 0x31, 0xca, 0x91, 0x59, 0x59,
                       0x9c, 0xda, 0xa5, 0x23, 0x15, 0x05, 0x52, 0x8d, 0xc7, 0x6c, 0x85, 0x46, 0x75, 0x11, 0x42, 0x81,
                       0x71, 0x24, 0x35, 0x9c, 0xc5, 0x3c, 0x2a, 0xa9, 0x18, 0x12, 0x62, 0x31, 0x88, 0x66, 0x2a, 0xaa,
                       0xce, 0x58, 0xc8, 0x67, 0x29, 0xc3, 0x8a, 0xb2, 0xa2, 0xa3, 0x99, 0xcc, 0x2b, 0x18, 0xc5, 0x50,
                       0xa8, 0xa6, 0x33, 0x18, 0x2a, 0x72, 0x75, 0x51, 0x28, 0x8c, 0xe6, 0x72, 0x94, 0xc3, 0x15, 0x63,
                       0x2a, 0xa9, 0x84, 0xe2, 0xc5, 0x89, 0xc5, 0x0e, 0x2b, 0x43, 0x31, 0x8a, 0x71, 0x28, 0x6a, 0x98,
                       0x55, 0x4e, 0x1c, 0x2a, 0x18, 0x6a, 0x2a, 0x33, 0x15, 0x58, 0xc6, 0x2a, 0xce, 0x65, 0x0a, 0xe6,
                       0x01, 0x50, 0x73, 0x8a, 0xe3, 0x15, 0x6a, 0x8c, 0xf1, 0x42, 0x18, 0xea, 0x39, 0xc5, 0x6a, 0x38,
                       0x3a, 0xa8, 0x8e, 0x76, 0x8c, 0x75, 0x54, 0x62, 0x02, 0x95, 0x43, 0x14, 0xc7, 0x3a, 0x94, 0xca,
                       0xe2, 0x95, 0x51, 0xc5, 0x11, 0x8a, 0x95, 0x8a, 0x7a, 0x94, 0xd4, 0x15, 0x14, 0xe2, 0x94, 0x2a,
                       0x05, 0x14, 0x95, 0x35, 0x54, 0x22, 0xa8, 0x75, 0xa5, 0x4a, 0xa8, 0x65, 0x55, 0x8d, 0x4b, 0x35,
                       0x95, 0x6a, 0x29, 0xc5, 0x28, 0x19, 0x49, 0x85, 0x95, 0x0a, 0x23, 0x15, 0x2a, 0x71, 0x48, 0xe1,
                       0x15, 0x08, 0x26, 0x75, 0x28, 0xc4, 0x2a, 0x30, 0x4a, 0x35, 0x0c, 0xc1, 0x29, 0x9c, 0xa3, 0x9c,
                       0x22, 0x65, 0x31, 0x98, 0x13, 0x30, 0x80, 0xc7, 0x21, 0xc5, 0x67, 0x0e, 0x54, 0x62, 0x98, 0x71,
                       0x2c, 0x12, 0x8c, 0x43, 0x11, 0xca, 0x33, 0x18, 0xa7, 0x32, 0x99, 0x51, 0xc3, 0x14, 0x66, 0x0e,
                       0x51, 0x82, 0xb1, 0x5c, 0x62, 0x55, 0xcc, 0xa3, 0x50, 0xe2, 0x81, 0x47, 0x38, 0xd5, 0x19, 0xa8,
                       0x56, 0x31, 0x4a, 0xa1, 0x8c, 0x54, 0x70, 0x54, 0x2b, 0x9d, 0x4a, 0xa8, 0xe7, 0x10, 0xc0, 0x55,
                       0xa8, 0xc5, 0x4a, 0xaa, 0x31, 0xa9, 0x8b, 0x52, 0x28, 0x71, 0x4a, 0x55, 0x1c, 0x2b, 0x15, 0x52,
                       0x29, 0x18, 0x95, 0x55, 0x06, 0x28, 0x15, 0x52, 0x95, 0x48, 0x95, 0x45, 0x23, 0xa8, 0x94, 0xaa,
                       0xd5, 0x42, 0x95, 0x45, 0x50, 0x52, 0x94, 0xa4, 0x14, 0x46, 0x95, 0x95, 0x52, 0x51, 0x4a, 0xa0,
                       0x96, 0x18, 0x2a, 0x2a, 0x56, 0x54, 0x4a, 0xa3, 0x8b, 0x83, 0x28, 0xea, 0x48, 0x56, 0x0a, 0x46,
                       0x28, 0xe6, 0x29, 0x8a, 0x28, 0x03, 0x85, 0x0c, 0x6e, 0x70, 0x2b, 0x2a, 0x2a, 0xa8, 0xc5, 0x39,
                       0xc3, 0x1c, 0x26, 0x54, 0xac, 0xae, 0x70, 0x63, 0x91, 0xc6, 0x10, 0xd5, 0x94, 0xa3, 0x18, 0xce,
                       0x34, 0x73, 0x83, 0x84, 0x14, 0xa1, 0xc1, 0x98, 0xe5, 0x18, 0xc6, 0x30, 0xd4, 0x54, 0x66, 0x31,
                       0x85, 0x0e, 0x70, 0x18, 0x8a, 0x55, 0x0c, 0xe1, 0x2a, 0xa3, 0x19, 0xce, 0x2a, 0x55, 0x19, 0x8a,
                       0x2a, 0xa9, 0xc0, 0x63, 0x0a, 0x4a, 0x73, 0x2a, 0xaa, 0xa0, 0x6a, 0x39, 0xcc, 0x2a, 0xc6, 0x6a,
                       0x4a, 0x96, 0x35, 0x0c, 0x74, 0x0a, 0x98, 0xc0, 0x4a, 0x54, 0x85, 0x47, 0x11, 0x0a, 0x33, 0x14,
                       0x55, 0x51, 0x85, 0x51, 0x87, 0x35, 0x64, 0x55, 0x55, 0x53, 0x15, 0x28, 0xcc, 0x65, 0x01, 0xd5,
                       0x05, 0xaa, 0x25, 0x2a, 0x19, 0xc5, 0x31, 0x14, 0xc0, 0x28, 0xaa, 0xaa, 0x33, 0x05, 0x1c, 0x2a,
                       0xfe, 0x28, 0xaa, 0xa8, 0xc6, 0x2a, 0x87, 0x2b, 0x0f, 0xac, 0xaa, 0x95, 0x9c, 0xaa, 0xb1, 0x89,
                       0x80, 0x55, 0x4a, 0x15, 0x30, 0x56, 0x98, 0xe0, 0xfc, 0x14, 0x54, 0x54, 0x61, 0x54, 0x4e, 0x31],
                       dtype=np.uint8)
    # 'Q3ECkkwXwDs', 16x16px
    bitmap = np.array([0x7c, 0x7f, 0x9f, 0x80, 0x87, 0xff, 0xd1, 0xfe, 0xec, 0x01, 0xec, 0xc9, 0x60, 0xc9, 0x71, 0x99,
                       0x37, 0x1b, 0xb6, 0x33, 0xb0, 0x67, 0xb3, 0xc6, 0xb7, 0x8e, 0xb0, 0x3c, 0xb0, 0xf9, 0xaf, 0xe3],
                       dtype=np.uint8)
    display = DisplayBuffer(32, 32)
    display.draw_bitmap(bitmap, 8, 8, 16, 16)
    print(display.render())
    assert 1 == 0